<?xml version="1.0" encoding="UTF-8"?>

<!--********************************************************************
Copyright 2019 Dan Margalit and Joseph Rabinoff
Copyright 2020 Ben Williams

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation. A copy of
the license is included in gfdl.xml.
*********************************************************************-->

<section xml:id="dds" number="6">
 <title>Discrete Dynamical Systems</title>
 <objectives>
    <ol>
      <li>Understand how to convert word problems to matrix equations.</li>
      <li>Learn how the eigenvalues and eigenvectors of a matrix <m>A</m> can be used to describe the long-term
      behaviour of an associated discrete dynamical system.</li>
      <li><em>Recipe:</em>calculate the state <m>v_t</m> of a discrete dynamical system at time <m>t</m>.</li>
      <li><em>Picture:</em> dynamics of a discrete dynamical system.</li>
      <li><em>Vocabulary:</em> <term>difference equation</term>, <term>(linear) discrete dynamical system</term>,
      <term>saddle point</term>, <term>attractor</term>, <term>repeller</term>.</li>
    </ol>
  </objectives>

 <introduction>
 <p>
 This section and the next are devoted to one common kind of application of eigenvalues: to the study of discrete
 dynamical systems. The discrete dynamical systems we study are <term>linear discrete dynamical systems</term>. 
 </p>

 <p>
   If <m>f: \R^n \to \R^n</m> is a transformation (not necessarily linear) and  <m> \dots, v_i, v_{i+1}, v_{i+2}, \dots
   </m> is a sequence of vectors in <m>\R^n</m> such that <m>v_{i+1} =f(v_i)</m>, then we say that <m>f</m> and the
   sequence <m> v_i, v_{i+1}, \dots </m> make up a <term>discrete dynamical system</term>. The difference equations we
   study are special kinds of discrete dynamical system, the kind where <m>f</m> is a linear transformation.
 </p>

 <p>Before giving too many technical definitions, we consider an example:</p>

 <specialcase xml:id="stochastic-truck-eg1">
 <idx><h></h></idx>
 <p>
	A truck rental company has locations all over Vancouver, where you can rent moving trucks. You can return them
	to any other location. For simplicity, pretend that there are three locations, and that every customer returns
	their truck the next day. Let <m>v_t</m> be the vector whose entries <m>x_t,y_t,z_t</m> are the number of trucks
	in locations <m>1,2,</m> and <m>3</m>, respectively. Let <m>A</m> be the matrix whose <m>i,j</m>-entry is the
	probability that a customer renting a truck from location <m>j</m> returns it to location <m>i</m>. For example, the
	matrix
 <me>
 A = \mat{.3 .4 .5; .3 .4 \color{seq-red}.3; \color{seq-green}.4 .2 .2}
 </me>
 encodes a <m>\color{seq-red}30\%</m> probability that a customer renting from location 3 returns the truck to location 2, and a <m>\color{seq-green}40\%</m> probability that a truck rented from location <m>1</m> gets returned to location <m>3</m>. The second row (for instance) of the matrix <m>A</m> says:
 </p>
 <blockquote>
 <p>
 The number of trucks returned to location <m>2</m> will be (on average):
 <me>
 \begin{split}
 30\% \amp\text{ of the trucks from location } 1 \\
 40\% \amp\text{ of the trucks from location } 2 \\
 30\% \amp\text{ of the trucks from location } 3 \\
 \end{split}
 </me>
 </p>
 </blockquote>
 <p>
 Applying this to all three rows, this means
 <me>
 A\vec{x_t y_t z_t} = \vec{.3x_t+.4y_t+.5z_t .3x_t+.4y_t+.3z_t .4x_t+.2y_t+.2z_t}.
 </me>
 Therefore, <m>Av_t</m> represents the number of trucks at each location the next day:
 <me>Av_t = v_{t+1}.</me>
	This is an example of a linear discrete dynamical system.
 </p>
 </specialcase>
 </introduction>

 <subsection>
   <title>Discrete dynamical systems</title>

 <p>
 Suppose that we are studying a system whose <term>state</term> at any given time can be described by a list of numbers: for
 instance, the numbers of rabbits aged <m>0,1,</m> and <m>2</m> years, respectively, or the number of customers of
 two different phone companies in Canada. In each case, we can represent the state at time <m>t</m> by a vector
 <m>v_t</m>. We assume that <m>t</m> represents a discrete time quantity: in other words, <m>v_t</m> is the state
 <q>on day <m>t</m></q> or <q>at year <m>t</m></q>. Suppose in addition that the state at time <m>t+1</m> is
 related to the state at time <m>t</m> in a linear way: <m>v_{t+1}=Av_t</m> for some matrix <m>A</m>. This is the
 situation we will consider in this section.
 </p>

 <definition>
   <idx><h>Matrix difference equation</h></idx>
   <idx><h>Difference equation</h><see>Matrix difference equation</see></idx>
   <statement>
 <p>
   A <term>(first-order homogeneous) matrix difference equation</term> is an equation of the form
 <me>v_{t+1} = Av_t</me>
 where <m>A</m> is an <m> n \times n</m> matrix. <idx><h>Initial condition</h></idx>An <term>initial condition</term> is
 a vector <m>v_0</m> in <m>\R^n</m>.   <idx><h>Linear Discrete dynamical system</h></idx>
   <idx><h>Discrete dynamical system</h><see>Linear discrete dynamical system</see></idx> Taken together, the difference equation and the initial condition determine a
 sequence of vectors
 <m> v_0 , v_1, v_2, \dots </m>
 such that <m>v_{t+1} = A v_t</m> for all <m>t</m>. This is called a <term>(linear) discrete dynamical system</term>.
 </p>
 </statement>
 </definition>

 
 <p>
 In other words:
 <ul>
 <li><m>v_t</m> is the <q>state at time <m>t</m>,</q></li>
 <li><m>v_{t+1}</m> is the <q>state at time <m>t+1</m>,</q> and</li>
 <li><m>v_{t+1}=Av_t</m> means that <m>A</m> is the <q>change of state matrix.</q></li>
 </ul>
 Note that
 <me>v_t = Av_{t-1} = A^2v_{t-2} = \cdots = A^tv_0,</me>
 which should hint to you that the long-term behavior of such a system is an eigenvalue problem.
 </p>

 
 <remark>
   <p> A <term>second-order</term> matrix difference equation is one where there are two matrices <m>A</m> and <m>B</m>
   and the equation
   <me> v_t = Av_{t-1} + Bv_{t-2}</me>
   holds for all <m>t</m>. An <term>inhomogeneous</term> (first order) matrix difference equation is one where there is a constant vector
   <m>c</m> such that
   <me> v_t = Av_{t-1} +c </me>
   holds for all <m>t</m>. We will not consider second- or higher-order or inhomogeneous difference equations, or their
   associated discrete dynamical systems, in this book.
   </p>
 </remark>

 </subsection>
 

 <subsection>
   <title>Long-term behaviour</title>
   <p>
   An important question to ask about a dynamical system is: what is its long-term behavior? How many trucks will be
   at each location after 100 days (assuming no intervention from the business owner)? How many rabbits will there be in
   20 years (and how many of them will be adults)? In this subsection, we will address this kind of question.
 </p>

 <example xml:id="ddsRabbitExample">
 <title>Rabbit population</title>
 <p>
 In a population of rabbits,
 <ol>
 <li>half of the newborn rabbits survive their first year;</li>
 <li>of those, half survive their second year;</li>
 <li>the maximum life span is three years;</li>
 <li>rabbits produce 0, 6, 8 rabbits in their first, second, and third years, respectively.</li>
 </ol>
 Let <m>v_t</m> be the vector whose entries <m>x_t,y_t,z_t</m> are the number of rabbits aged <m>0, 1</m>, and <m>2</m>, respectively. The rules above can be written as a system of equations:
 <me>
 \spalignsysdelims..\syseq{
 x_{t+1} = \. \+ 6y_t + 8z_t;
 y_{t+1} = \frac 12x_t;
 z_{t+1} = \. \+ \frac 12y_t\rlap.
 }
 </me>
 In matrix form, this says:
 <me>\mat{0 6 8; \frac12 0 0; 0 \frac12 0} v_t = v_{t+1}.</me>
 This forms a discrete dynamical system.
 </p>
 <p>
 Define
 <me>A = \mat{0 6 8; \frac12 0 0; 0 \frac12 0}.</me>
 We compute <m>A</m> has eigenvalues <m>2</m> and <m>-1</m>, and that an eigenvector with eigenvalue <m>2</m> is
 <me>v = \vec{16 4 1}.</me>
 This partially explains why the ratio <m>x_t:y_t:z_t</m> approaches <m>16:4:1</m> and why all three quantities eventually double each year in this demo:
 </p>
 <figure>
 <caption>Left: the population of rabbits in a given year. Right: the proportions of rabbits in that year. Choose any values you like for the starting population, and click <q>Advance 1 year</q> several times. Notice that the ratio <m>x_t:y_t:z_t</m> approaches <m>16:4:1</m>, and that all three quantities eventually double each year.</caption>
 <mathbox source="demos/rabbits.html" height="300px"/>
 </figure>
 </example>


 <specialcase hide-type="false">
     <title>A Predatorâ€“Prey Model</title>
     <p>
       There is a pond with two species: frogs and midges. The frogs eat the midges. The population is counted once a
     year. We measure frogs in hundreds (<m>10^2</m>), and midges in hundreds of thousands (<m>10^5</m>).</p>

     <p> If it were not for the frogs, the midge population would increase by <m>30\%</m> each year. We assume
     that each frog kills <m>500</m> midges each year. Equivalently, for each <m>100</m> frogs, the number of midges that gets eaten
     is <m>(0.5) \times 100,000</m>.
     </p>

     <p>
       The growth of the frog population is constrained by the availability of midges. We assume that on average, for
       each <m>100,000</m> midges, <m>10 = 0.1 \times 100</m> tadpoles survive to become adult frogs each year. Finally,
       we need the death rate of the frog population. It is <m>30\%</m>.  That is, only <m>70\%</m> of the adult frogs
       this year survive until next year.
     </p>

     <p>We now show how this description leads directly to a difference equation</p>

       <p>
	 Let <m>f_t</m> denote the number of frogs (in hundreds) after <m>t</m> years have passed, and let <m>m_t</m> denote the number
	 of midges (in hundreds of thousands) after <m>t</m> years have passed. Let
	 <me> v_t = \vec{f_t m_t}.</me>
	 Then the text of the problem tells us that
	 <me> f_{t+1} = 0.7 f_t + 0.1 m_t</me>
	 and
	 <me> m_{t+1} = -0.5 f_t + 1.3m_t.</me>
	 This can be written in matrix form:
	 <me> v_{t+1} = \mat{0.7 0.1;  -0.5  1.3} v_t. </me>
	 Write
	 <me> A  = \mat{0.7 0.1;-0.5  1.3} </me>
	 for later reference.
       </p>

       <p>If <m>v_0</m> is the vector containing the population data for this year (midges and frogs), then <m>v_1 =
       Av_0</m> is the vector containing the population data for next year, <m>v_2=Av_1</m> is the vector containing the
       population for the year after, and so on.
       </p>

       <p>For example, if we calculate that there are <m>700</m> frogs and <m>9\times 10^5</m>midges in year 0, then we
       would record this as
       <me> v_0 = \vec{7 9}.</me>
       We could then calculate
       <me>v_1 =\mat{0.7 0.1;-0.5  1.3} \vec{7 9} = \vec{5.8 8.2}</me>
       and
       <me>v_2 = \mat{0.7 0.1;-0.5  1.3} \vec{5.8 8.2} = \vec{4.88 7.76}.</me>
       This represents  <m>488</m> frogs and <m>776,000</m> midges in year <m>2</m>.
       </p>

      <p>
	There are many questions one can ask about the model we have constructed. Let us concentrate here on questions
	about <em>long-term</em> behaviour of the model. That is, what happens in our model after a large number of
	years? In mathematical notation, we want to know what <m>v_t</m> looks like as <m>t \to \infty</m>. 
     </p>

     <p>
       In order to study <m>v_t</m>, we start with the observation
       <me> v_t = A v_{t-1} = A A v_{t-2} = \dots = \overbrace{A A \dots A}^{\text{$t$ times}}  v_0. </me>
       This is to say that to get <m>v_t</m>, you apply <m>A</m> to <m>v_0</m> a total of <m>t</m> times.
     </p>

     <p> In <xref ref="diagonalization"/> we saw that <m>A^t</m> is troublesome to calculate directly when <m>t</m> is large, but it is
     easier to calculate if we diagonalize: <m>A = CDC^{-1}</m>. In the case of the frogs and midges:
     <me> \mat{0.7 0.1;-0.5  1.3} = A = CDC^{-1} = \mat{1 1; 5 1}\mat{1.2 0; 0 0.8}\mat{-0.25 0.25; 1.25 -0.25}. </me>
     This allows us to write down a computable formula for <m>v_t</m>:
     <men> v_t = C D^t C^{-1} v_0.</men>
     For instance, if we continue to suppose that <m>v_0=\vec{7 9}</m>, then we calculate
     <men xml:id="frogMidgeEqn"> \begin{split} v_t = \vec{f_t m_t}= \mat{1 1; 5 1}\mat{1.2^t 0; 0 0.8^t}\mat{-0.25 0.25; 1.25 -0.25}\vec{7 9} =\\= \mat{1 1; 5 1}\mat{1.2^t 0;
     0 0.8^t}\vec{0.5 6.5}=\mat{1 1; 5 1}\vec{(1.2)^t(0.5) (0.8)^t(6.5)}=\\
     =\vec{1(1.2)^t(0.5)+1(0.8)^t(6.5) 5(1.2)^t(0.5)+1(0.8)^t(6.5)}.\end{split}</men>
     Simply, the model predicts that the number of frogs (in hundreds) is given by
     <me>f_t=1(1.2)^t(0.5) + 1(0.8)^t(6.5)</me>
     and the number of midges (in hundreds of thousands) is given by
     <me>m_t=5(1.2)^t(0.5)+1(0.8)^t(6.5).</me>
     </p>

     <p>
       What we asked about the system was the long-term behaviour. From this point of view, the information in 
       <xref ref="frogMidgeEqn">equation</xref>  was more than we needed. We know from calculus that as <m>t</m> grows, the quantity <m>(0.8)^t</m> tends to
       <m>0</m>, whereas <m>(1.2)^t</m> grows without bound. This is good news for our frogs and midges, since it we calculate
       <me> \lim_{t \to \infty} f_t = \lim_{t\to \infty} 1(1.2)^t(0.5) + \lim_{t \to \infty} 1(0.8)^t(6.5) = \infty + 0
       </me>
       and similarly for the midges <m>\lim_{t \to \infty} m_t = \infty</m>, so the model predicts that both frogs and midges will thrive.
     </p>

     <p>The model can also be used to predict the ratio of frogs to midges. This is a standard kind of limit calculation 
     <me> \lim_{t \to \infty} \frac{f_t}{m_t} = \lim_{t \to \infty} \frac{1(1.2)^t(0.5) + 1(0.8)^t(6.5)}{5(1.2)^t(0.5)+1(0.8)^t(6.5)} = \frac{1}{5}.</me>
     This says that after several years have passed, the ratio of frogs to midges will be approximately 100 frogs for
     each 500,000 midges, which we can simplify to 1 frog for every 5,000 midges.
     </p>
 </specialcase>

   <!-- <figure><caption></caption><mathbox -->
   <!--     source="demos/dynamics3.html?mat=0,1:-1,-1&amp;vec=true&amp;size=20&amp;y=1,2,3&amp;flow=false&amp;matname=A&amp;vecname=v" -->
   <!--     height="600px"/> -->
   <!-- </figure> -->
   <!--   <figure><caption></caption><mathbox -->
   <!--     source="demos/dynamics3.html?mat=0.8,0:0,0.8&amp;vec=true&amp;size=20&amp;y=1,2,3&amp;flow=false&amp;matname=A&amp;vecname=v" -->
   <!--     height="600px"/> -->
   <!--  </figure> -->

   <!--  <figure><caption></caption><mathbox -->
   <!--     source="demos/dynamics3.html?mat=1,1:0,1&amp;vec=true&amp;size=20&amp;y=1,2,3&amp;flow=false&amp;matname=A&amp;vecname=v" -->
   <!--     height="600px"/> -->
   <!--  </figure> -->
   <!--  <figure><caption></caption><mathbox -->
   <!--     source="demos/dynamics3.html?mat=0.8,0.3:0.2,0.7&amp;vec=true&amp;size=20&amp;y=1,2,3&amp;flow=false&amp;matname=A&amp;vecname=v" -->
   <!--     height="600px"/> -->
   <!-- </figure> -->

   <!-- <figure><caption></caption><mathbox -->
   <!--     source="demos/dynamics3.html?mat=0.2,0,0:0,0.8,0:0,0,1.2&amp;vec=true&amp;size=20&amp;y=1,2,3&amp;flow=false&amp;matname=A&amp;vecname=v" -->
   <!--     height="600px"/> -->
   <!-- </figure> -->
     
     <warning>
       <p>You can choose either ordering for the variables at the start of a question like this. You can list the midges first and the frogs second, to get the system
       <me> v_t = \vec{m_t f_t}, \quad  A =  \mat{1.3  -0.5; 0.1 0.7}.</me>
       This describes the same model, so the formulas you would derive for <m>m_t</m> and <m>f_t</m> would be the same.
       </p>
       <p>It is extremely important to keep the same order throughout, however. Do not mix up the order by writing frogs first sometimes and midges first other times. This will lead
       to nonsense.</p>
       <p>Similarly, in problems with more than two variables, you can choose any order for the variables when you work it out. The important thing is to be consistent throughout the problem.</p>
     </warning>

     <paragraphs>
       <title>Writing the vectors in terms of eigenvectors</title>
        <p> An analysis such as we did for the system of frogs and midges can be simplified and made more conceptual by
	concentrating on the role of eigenvectors in the story. Concentrating on eigenvectors can also make the process of
	diagonalization less mysterious.
	</p>
	
       <p>
	 Suppose we have a discrete dynamical system
	 <me>v_{t+1} = A v_t</me>
	 and an initial vector <m>v_0</m>, then we can write
	 <me> v_1 = Av_0,\quad v_2 = Av_1 = A(Av_0) = A^2 v_0 , \quad \dots,\quad  v_t = \overbrace{A \dots
	 A}^{\text{$t$ times}} v_0 = A^t v_0.</me>
       </p>

       <p>The situation is simplest when <m>v_0</m> is an eigenvector of <m>A</m>, with eigenvalue <m>\lambda</m>. In
       this case, the multiplication <m> A v_0 </m> has the effect of stretching <m>v_0</m> by a factor of
       <m>\lambda</m>, so that applying <m>A</m> <m>t</m> times to <m>v_0</m> results in scaling
       <m>v_0</m> by <m>\overbrace{\lambda \lambda \dots \lambda}^{\text{$t$ times}}=  \lambda^t</m>.
       <me> A^t v_0 = \lambda^t v_0 </me>
       provided <m>v_0</m> is an eigenvector with eigenvalue <m>\lambda</m>.
       </p>

       <p>
	 The next best situation, which is the usual one, is when we can write <m>v_0</m> as a linear combination of
	 eigenvectors of <m>A</m>. Suppose <m>w_1, \dots, w_j</m> are eigenvectors of <m>A</m> with associated
	 eigenvalues <m>\lambda_1, \dots, \lambda_j</m>. If
	 <me> v_0 = c_1 w_1 + \dots + c_j w_j </me>
	 for some coefficients <m>c_1, \dots, c_j</m> then
	 <me> A^t v_0 = c_1 A^t w_1 + \dots + c_j A^t w_j  = c_1\lambda_1^t w_1 + \dots + c_j\lambda_j^t w_j.</me>
	 We can always find ourselves in this situation if <m>A</m> is diagonalizable, because we can find an ordered basis for
	 <m>\R^n</m> made up of eigenvectors of <m>A</m> in this case. We might even be able to write <m>v</m> as a
	 linear combination of eigenvectors even if <m>A</m> is not diagonalizable, but it's not guaranteed.
       </p>

       <p>From now on, we assume <m>A</m> is diagonalizable. Let
       <me> C = \mat[c]{ | |,,| ; w_1 w_2 \dots, w_n; | |,,|}</me>
       be an invertible matrix where the columns are eigenvectors of <m>A</m>. We want to write
       <me> v_0 = c_1w_1 + \dots + c_n w_n, </me>
       which is the same as solving the system of linear equations
       <me> v_0 = C \vec{c_1 c_2 \vdots, c_n}</me>
       so that we deduce that
       <me> C^{-1} v_0 = \vec{c_1 c_2 \vdots, c_n}. </me>
       </p>

       <p>Having written <m>v</m> as a linear combination of eigenvectors, we can calculate <m>v_t</m>:
       <me> v_t = \lambda_1^t c_1 w_1 + \lambda_2^tc_2w_2+\dots + \lambda_n^t c_n w_n.</me>
</p>
<bluebox xml:id="ddsRecipe">
  <title>Recipe: Calculating <m>v_t</m>, the state at time <m>t</m>, for a  discrete dynamical system</title>
  <idx><h>Discrete dynamical systems</h><h>calculating state at time <m>t</m></h>
  </idx>
  <p>If <m>A</m> and <m>v_0</m> determine a discrete dynamical system <m>v_t = A^t v_0</m>, and if <m>A</m> is diagonalizable, then to calculate the
  vector <m>v_t</m>
  <ul><li>Write
  <me>v_0 = c_1 w_1 + c_2 w_2 + \dots + c_n w_n</me>
  where <m>w_1, w_2, \dots, w_n</m> are eigenvectors of <m>A</m> with associated eigenvalues <m>\lambda_1, \lambda_2,
  \dots, \lambda_n</m>. </li>
  <li> Then
  <me> v_t = c_1 \lambda_1^t w_1 + c_2 \lambda_2^t w_2 + \dots + c_n \lambda_n^t w_n .</me></li>
  </ul>
  </p>
</bluebox>
     </paragraphs>
<paragraphs>
  <title>Relating this procedure to diagonalization</title>
	<p> 
       In this case we are taking the vectors <m>w_1, w_2, \dots, w_n</m> and are forming the combination with
       coefficients
       <men xml:id="ddsCoeffVector"> \vec{\lambda_1^tc_1 \lambda_2^tc_2 \vdots, \lambda_n^tc_n}.</men>
       You can check that if <m>D</m> denotes the diagonal matrix having <m>\lambda_1, \lambda_2, \dots, \lambda_n</m>
       as diagonal entries, then the vector of coefficients <xref ref="ddsCoeffVector"/> is calculated as <m>D^t C^{-1}v_0</m>.
       Then to combine <m>w_1, w_2, \dots, w_n</m> with these coefficients, we take the product <m>C D^t C^{-1}
       </m>. That is to say:
       <me> v_t = C D^t C^{-1}v_0 = \lambda_1^t c_1 w_1 + \lambda_2^tc_2w_2+\dots + \lambda_n^t c_n w_n.</me>
       </p>

       <specialcase>
	 <title>Frogs and midges, revisited</title>
	   <p>We look at the example of frogs and midge again, this time using the eigenvectors of <m>A</m>
	   extensively. Remember that
	   <me>v_{t+1} = A v_t, \quad A = \mat{0.7 0.1;-0.5 1.3}.</me>
	   Set <m>v_0=\vec{7 9}</m>. We know <m>A</m> has eigenvectorâ€“eigenvalue pairs
	   <me>w_1 = \vec{1 5}, \, \lambda_1 = 1.2;\quad w_2=\vec{1 1},\, \lambda_2=0.8.</me>
	   For later use, we set up a little more notation:
	   <me>v_t = \vec{f_t m_t}, \quad C = \mat{1 1; 5 1},\quad D = \mat{1.2 0; 0 0.8}.</me></p>
	   <p>Write <m>v_0</m> in terms of eigenvectors of <m>A</m>:
	   <me>\vec{7 9} = (0.5)\vec{1 5} + (6.5)\vec{1 1}.</me>
	   You can calculate these coefficients in many ways, of course, but one way is to do the multiplication
	   <me>C^{-1} v_0 = \vec{0.5 6.5}.</me></p>

	   <p>We now know that
	   <men xml:id="frogMidge1">v_t  = (1.2)^t(0.5)\vec{1 5} + (0.8)^t (6.5) \vec{1 1},</men>
	   which is saying the same thing as
	   <me>v_t = C D^t C^{-1}v_0</me>
	   in different notation. You can check by expanding out that <xref ref="frogMidge1"/> gives the same
	   information as <xref ref="frogMidgeEqn"/>.
	   </p>

	   <p>Equation <xref ref="frogMidge1"/> is particularly useful for understanding the long-term behaviour of the
	   model. As <m>t</m> grows larger, the coefficient <m>(0.8)^t</m> tends to <m>0</m>. This means that as time
	   goes by, the contribution of <m>(0.8)^t(6.5)\vec{1 1}</m> to <m>v_t</m> becomes less and less important, and
	   the other summand, <m>(1.2)^t (0.5) \vec{5 1}</m> explains the long-term behaviour of the model. For example,
	   we can see directly from Equation <xref ref="frogMidge1"/> that the ratio of <m>f_t</m> (100s of frogs) to
	   <m>m_t</m> (100,000s of midges) tends to <m>1:5</m> as <m>t \to \infty</m>.
	   </p>
	    <figure xml:id="figFrogMidge"><caption>A plot of the number of frogs and midges in each year after year 0. The <m>x</m>-coordinate
	    denotes 100s of frogs, and the <m>y</m>-coordinate denotes 100,000s of midges.</caption><mathbox
	    source="demos/dynamics3.html?mat=0.7,0.1:-0.5,1.3&amp;v1=1,0&amp;v2=0,1&amp;vec=true&amp;size=20&amp;y=7,9&amp;flow=false&amp;matname=A&amp;vecname=v"
	    height="600px"/></figure>

	    <p>By moving the initial vector around in the figure above, you can see how the long-term behaviour of the
	    model depends on <m>v_0</m>. For example, if <m>v_0</m> lies in the eigenspace for <m>0.8</m>, then the
	    sequence <m>v_0, Av_0, A^2v_0, \dots</m> is attracted the origin. For any other starting position, the
	    vector <m>v_0</m> has some nonzero component in the <m>1.2</m>-eigenspace, and this component will determine
	    the long-term behaviour, so that <m>v_0, Av_0, A^2v_0, \dots</m> is eventually repelled by the origin. In a
	    circumstance like this, where the origin attracts along some directions and repels along others, the origin
	    is said to be a <term>saddle point</term><idx><h>saddle point</h></idx>.</p>
     
	    <p>As a real-world matter, however, observe that moving <m>v_0</m> to the right has bad consequences for the
	    frogs and midges. If, for example, we move <m>v_0</m> to <m>v_0 = \vec{8 5}</m>, then <me> v_0 = -0.75
	    \vec{1 5} + 7.25\vec{1 1}</me> so that applying the recipe gives us <me>\vec{f_t
	    m_t}=v_t = (-0.75)(1.2)^t\vec{1 5} + (7.25)(0.8)^t\vec{1 1}.</me> As <m>t</m> becomes larger, both
	    <m>f_t</m> and <m>m_t</m> tend to <m>-\infty</m>. This is an abstract mathematical statement, and does not
	    make sense for the frogs and midges. In the real world, as soon as the number of midges reaches <m>0</m>,
	    the ecosystem will collapse and the frogs and midges will all die.
	    </p>
       </specialcase>
       
     </paragraphs>
     <paragraphs>
       <title>Various kinds of long-term behaviour</title>

       <p> There is considerable diversity in how discrete dynamial systems specified by <m>v_{t+1} = A v_t</m> can
       behave, even when we restrict our attention to <m>2 \times 2</m> matrices. The following examples do not cover
       every possibility, but they should be enough to give you the tools to understand every case.
       </p>

       

	   
       <example>
	 <title>Two different eigenvalues between <m>0</m> and <m>1</m></title>
	   <p>Suppose <m>A</m> is a diagonalizable <m>2 \times 2</m> matrix with two eigenvalues <m>\lambda_1,
	   \lambda_2</m>, both of which satisfy <m>0 &lt; \lambda &lt; 1</m>. As before, a general <m>v_0</m> can be
	   written as <me> v_0 = c_1w_1 + c_2 w_2 </me> where <m>w_1, \, w_2</m> are eigenvectors of <m>A</m>. We deduce
	   that <me> v_t = c_1 \lambda_1^t w_1 + c_2 \lambda_2^t w_2 </me>, by use of the recipe. The
	   sequence of vectors <m>v_t</m> converges to the origin no matter what
	   initial vector is chosen. We say the origin is an <term>attractor</term><idx><h>attractor</h></idx> in this
	   case.
	   </p>
	   
	   
	   <figure xml:id="figAttractor"><caption></caption><mathbox
	   source="demos/dynamics3.html?mat=0.6,0.2:0.3,0.7&amp;v1=1,0&amp;v2=0,1&amp;vec=true&amp;size=20&amp;y=9,7&amp;flow=false&amp;matname=A&amp;vecname=v"
	   height="600px"/></figure>
	   <p>In this example, the eigenvalues of <m>A</m> are <m>\lambda_1 = 0.9</m> and <m>\lambda_2 = 0.4</m>. We
	     can write down associated eigenvectors: <m>w_1 = \vec{1 1}</m> and <m>w_2 = \vec{-1 1}</m>. Both
	     <m>\lambda_1</m> and <m>\lambda_2</m> satisfy <m> \lim_{n \to \infty} \lambda^n = 0</m>, and as a
	     consequence, the origin is an attractor. 
	     </p>

	     <p> A subtle point is that even though both eigenvalues are between <m>0</m> and <m>1</m>, nonetheless the
	     larger of the two eigenvalues <m> \lambda_1 = 0.9</m> still influences how the system behaves in the long
	     run more than the smaller eigenvalue <m>\lambda_2 = 0.4</m> does. If we write
	     <me>  v_0 = c_1w_1 + c_2 w_2 = c_1 \vec{1 1} + c_2\vec{-1 1} </me>
	     then
	     <me> v_t = c_1\vec{(0.9)^t1 (0.9)^t1}+c_2\vec{(0.4)^t(-1) (0.4)^t} = \vec{c_1(0.9)^t-c_2(0.4)^t
	     c_1(0.9)^t+c_2(0.4)^t}.</me>
	     The ratio between the first- and second-coordinate entries of <m>v_t</m> is (as a fraction)
	     <me> r_t= \frac{c_1(0.9)^t-c_2(0.4)^t}{c_1(0.9)^t+c_2(0.4)^t}.</me>
	     To see what happens as <m>t \to \infty</m>, we can do a limit calculation
	     <me>\lim_{t \to \infty} r_t = \lim_{t \to \infty}
	     \frac{c_1-c_2\frac{(0.4)^t}{(0.9)^t}}{c_1+c_2\frac{(0.4)^t}{(0.9)^t}} = \frac{c_1 - 0}{c_1 + 0} = 1</me>
	     provided <m>c_1 \neq 0</m>.</p>
	     <p>This means that as <m>t</m> becomes larger and larger, the vector <m>v_t</m> gets closer and closer to
	     the line spanned by <m>w_1= \vec{1 1}</m>, unless <m>v_0</m> started out in the <m>w_2</m>-eigenspace (in
	     this case, <m>v_t</m> will lie in the <m>w_2</m>-eigenspace for all values of <m>t</m>).</p>
	   </example>

	   <example>
	     	 <title>Two different eigenvalues bigger than <m>1</m></title>
	     <p>The case of two eigenvalues <m> \lambda_1,\, \lambda_2 > 1</m> is similar to that of two eigenvalues <m>
	     0 &lt; \lambda &lt; 1 </m>. The difference is that the sequence <m>v_0, v_1, \dots </m> moves away from,
	     rather than toward, the origin. In this case, the origin is said to be a <term>repeller</term>.</p>
	     <figure><caption></caption><mathbox
       source="demos/dynamics3.html?mat=1.92,-0.36:0.24,1.08&amp;v1=1,0&amp;v2=0,1&amp;vec=true&amp;size=20&amp;y=-1.1,-4.3&amp;flow=false&amp;matname=A&amp;vecname=v"
       height="600px"/></figure>
	   </example>

     
	   <example>
	     <title>A repeated eigenvalue, diagonal case</title>
	     <p>Here is an example where the matrix <m>A</m> has two repeated eigenvalues and is diagonalizable</p>
	     <figure><caption></caption><mathbox
       source="demos/dynamics3.html?mat=1.5,0:0,1.5&amp;v1=1,0&amp;v2=0,1&amp;vec=true&amp;size=20&amp;y=1,-2&amp;flow=false&amp;matname=A&amp;vecname=v"
       height="600px"/></figure>
	     <p>In this case, the analysis of the model is particularly simple. Every nonzero vector is an eigenvector
	     for this <m>A</m>, since it has a <m>2</m>-dimensional eigenspace. We calculate that <m>v_t= A^tv_0 =
	     (1.5)^t v_0</m> for all <m>t</m>.</p>
	   </example>


	   <example xml:id="exampleEig1">
	     <title>One eigenvalue equal to <m>1</m></title>
	     <p> In section <xref ref="stochastic2"/>, we will devote a lot of attention to matrices where
	     (exactly) one of the eigenvalues is <m>1</m>.</p>

	     <figure><caption></caption><mathbox
	     source="demos/dynamics3.html?mat=1,0.3:0,0.8&amp;v1=1,0&amp;v2=0,1&amp;vec=true&amp;size=20&amp;y=4,-7&amp;flow=false&amp;matname=A&amp;vecname=v"
       height="600px"/></figure>
	   </example>

	   <example>
	     <title>A non-diagonalizable matrix</title>
<p> Here is an example where there is a repeated eigenvalue but the matrix is not diagonalizable. Analysis of discrete
dynamical systems is harder than in the diagonalizable case. We will not say much about it here.
</p>
<figure><caption></caption><mathbox
       source="demos/dynamics3.html?mat=1.2,-0.2:0.8,0.4&amp;v1=1,0&amp;v2=0,1&amp;vec=true&amp;size=20&amp;y=4,-1&amp;flow=false&amp;matname=A&amp;vecname=v"
       height="600px"/></figure>
	   </example>
     </paragraphs>

	 <paragraphs>
	   <title>Possibly negative eigenvalues</title>

	   <p>
	       We have said nothing about cases where one or both eigenvalues of <m>A</m> are negative. A negative eigenvalue <m> \lambda_1
	       &lt; 0</m> causes the coefficient of the corresponding eigenvector to switch signs from positive to
	       negative or back again every time <m>A</m> is applied.
	     </p>

	     <p> With the exception that the negative eigenvalue or eigenvalues cause the vectors <m>v_0, v_1, v_2,
	     \dots</m> to &#8220;jump&#8221; back and forth, the analysis of discrete dynamical systems with negative
	     eigenvalues is very similar to that of positive eigenvalues.
	     </p>

	     <p>There are three main cases for a <m>2\times 2</m>-matrix <m>A</m> with two distinct real eigenvalues <m>
	     \lambda_1, \lambda_2</m>
	     <ul>
	         <li>Both of <m> |\lambda_1|, |\lambda_2| </m> are  bigger than <m>0</m> but less than <m>1</m>. In this
		 case, the origin is an attractor, which is to say the sequence <m>v_0, v_1, v_2, \dots </m> will always
		 approach the origin.</li>
	        <li>One of <m> |\lambda_1|, |\lambda_2| </m> is greater than <m>1</m>, and the other is less than <m>1</m>. In this case, the origin is a
	       saddle point, which is to say the sequence <m>v_0, v_1, v_2, \dots </m> can go towards the origin for a
		time, before heading away again (unless it approaches exactly along the eigenspace for the eigenvalue of
		smaller magnitude).</li>
	       <li>Both of <m> |\lambda_1|, |\lambda_2| </m> are greater than <m>1</m>. In this case, the origin is a
	       repeller, which is to say the sequence <m>v_0, v_1, v_2, \dots </m> will always go away from the
	       origin.</li>
	     </ul>
	     </p>

	     <p>Of course, this discussion leaves out a great many special cases. What if <m>|\lambda_1|=1</m>, or
	     <m>\lambda_2 = 0</m>? There are too many of these for it to be helpful for us to cover them all, but by
	     use of the recipe and a little calculus, you can study almost all of them. The only case you might not be
	     equipped to handle is that of a non-diagonalizable matrix <m>A</m>.
	     </p>

	     <example>
	       <title>One positive, one negative eigenvalue</title>
	       <p>Here is a typical example with one positive and one negative eigenvalue. Note that the magnitudes
	       <m>|\lambda_1| &lt; 1</m> and  <m>1 &lt;  |\lambda_2|</m> imply the origin is a saddle point. The sequence <m>v_0, v_1, v_2,
	       \dots </m> goes off to <m>\infty</m> along the <m>\lambda_2</m>-eigenspace. Since <m>\lambda_1</m> is
	       negative, the sequence keeps switching from one side of this eigenspace to the other.</p>
	     
	         <figure><caption><m>-1 &lt; \lambda_1 &lt; 0</m> and <m>1 &lt; \lambda_2</m></caption><mathbox
	     source="demos/dynamics3.html?mat=1,1:1,0&amp;v1=1,0&amp;v2=0,1&amp;vec=true&amp;size=20&amp;y=-3,2&amp;flow=false&amp;matname=A&amp;vecname=v"
       height="600px"/></figure>
	   </example>
	   
	 </paragraphs>
 </subsection>

   <subsection>
     <title>Discrete dynamical systems with complex eigenvalues</title>
     <p>It can happen that a real matrix <m>A</m> has complex eigenvalues. The associated dynamical systems show
     spiralling behaviour. 
     </p>

     <example>
       <title>Complex eigenvalues</title>
       <p>Suppose <me>A=\mat{1.1 -0.1; 0.1 1.1}.</me> In this case there are two complex-conjugate eigenvalues:
       <m>\lambda_1=\frac{11}{10} + \frac{i}{10}</m> and <m>\lambda_2=\frac{11}{10} - \frac{i}{10}</m>. They have associated eigenvectors <me>w_1  =
       \vec{ i 1}\quad \text{and} \quad w_2 = \vec{-i 1}.</me> 
       </p>

       <figure xml:id="figComplexOutward"><caption></caption><mathbox
       source="demos/dynamics3.html?mat=1.1,-0.1:0.1,1.1&amp;v1=1,0&amp;v2=0,1&amp;vec=true&amp;size=20&amp;y=-3,3&amp;flow=false&amp;matname=A&amp;vecname=v"
       height="600px"/></figure>

       <p> Even though the eigenvalues and eigenvectors are not real-valued, we can still carry out our usual
       calculations. For any given <m>v_0</m>, we can decompose it as a linear combination of eigenvectors for
       <m>A</m>. For instance
       <me>v_0 = \vec{-3,3} = \frac{3 + 3i}{2} \vec{i 1}  + \frac{3-3i}{2}\vec{-i 1}.</me>
       This allows us to write
       <me>v_t = \left(\frac{11}{10} + \frac{i}{10}\right)^t \frac{3 + 3i}{2} \vec{i 1}  + \left(\frac{11}{10} -
       \frac{i}{10}\right)^t\frac{3-3i}{2}\vec{-i 1}.</me>
       You can verify that even though this calculation involves imaginary numbers, the vector <m>v_t</m> always has
       real entries.
       </p>
     </example>


     
     <p>Previously, we saw that magnitude of the eigenvalues, i.e., whether <m>|\lambda| &lt; 1</m> or <m>|\lambda| >
       1 </m>, had a big effect on the long-term behaviour of the model. The case of complex eigenvalues is the same,
       with the important modification that we use the <term>complex absolute value</term> to measure the magnitude of the
     eigenvalues. This is discussed more fully in <xref ref="appAoCN"/>.</p>      
     
     <p> We say that a sequence of complex numbers
       <m>(z_1, z_2, \dots)</m> <idx><h>tend to infinity</h></idx><term>tends to infinity</term> if the sequence <m>(|z_1|, |z_2|, \dots  )</m> of
       positive real numbers keeps growing without bound. If <m>z</m> is a complex number, then as <m>t \to \infty</m>
       <me> z^t \text{ tends to } \begin{cases}\text{infinity if $|z| > 1$} \\ \text{$0$ if $|z| &lt; 1$.} \end{cases}</me>
     </p>
     <p>If <m>A</m> is a real <m>2 \times 2</m>-matrix with non-real eigenvalues, <m> \lambda_1, \,
     \lambda_2 =\bar \lambda_1</m>, then there are three possibilities for the long-term behaviour of the associated
     discrete dynamical system.
     <ul>
       <li> If <m> |\lambda_1|=|\lambda_2| &lt; 1 </m>, then the vectors <m> v_0 , v_1, v_2, \dots</m> will spiral
       inwards, towards the origin, which is an attractor.
       </li>
       <li> If <m> |\lambda_1|=|\lambda_2| = 1 </m>, then the vectors <m> v_0 , v_1, v_2, \dots</m> will move around the
       origin in a periodic or quasi-periodic way, neither getting closer or farther away on average.
       </li>
       <li> If <m> |\lambda_1|=|\lambda_2| > 1 </m>, then the vectors <m> v_0 , v_1, v_2, \dots</m> will spiral
       outwards, away from the origin, which is a repeller.
       </li>
     </ul>
     </p>

     <example>
       <title>Complex eigenvalues of modulus <m>1</m></title>
       <p>Here is an example of a discrete dynamical system where the eigenvalues are complex numbers satisfying 
       <m>|\lambda|=1</m>. Observe the rotating behaviour.</p>
        <figure xml:id="figComplexQuasiperiod"><caption></caption><mathbox
	source="demos/dynamics3.html?mat=-3.06123569811873,-4.19535764538226:1.67814305815290,1.97319347633999&amp;v1=1,0&amp;v2=0,1&amp;vec=true&amp;size=10&amp;y=-3,3&amp;flow=false&amp;matname=A&amp;vecname=v"
       height="600px"/></figure>
   
     <p>This system is not exactly periodic: there is no <m>t > 0</m> such that <m>v_t = v_0</m>.</p>
     </example>
     <example>
       <title>A periodic discrete dynamical system</title>
       
     <p>It is also possible to have a truly periodic system. In the case illustrated, the matrix <m>A</m> satisfies the
     equation <m>A^7=I_2</m>. This means that the sequence <m>v_0, Av_0 , A^2 v_0 , \dots </m> repeats itself every
     <m>7</m> terms.
     </p>
   <figure xml:id="figComplexPeriod"><caption>A discrete dynamical system of period 7</caption><mathbox
	source="demos/dynamics3.html?mat=-1.72200464554536,-3.90915741234015:1.56366296493606,2.9689842492628&amp;v1=1,0&amp;v2=0,1&amp;vec=true&amp;size=10&amp;y=-3,3&amp;flow=false&amp;matname=A&amp;vecname=v"
	height="600px"/></figure>
     </example>
   </subsection>

   <subsection>
     <title>Discrete dynamical systems in more than 2 dimensions</title>
     <p>
       The basic principles for discrete dynamical systems in more than 2 dimensions remain the same as in 2
       dimensions. As before, we will concentrate on the case where <m>A</m> is diagonalizable.
     </p>

     <p>Even in the <m>3 \times 3</m> case, there are many possibilities for how a discrete dynamical system can
     behave. It would not be helpful to list every possibility here.
     </p>

     <p>In general, if <m>A</m> is an <m>n \times n</m> diagonalizable matrix, then we may find a basis <m> w_1, \dots,
     w_n</m> that consists of eigenvectors of <m>A</m>, with associated eigenvalues <m>\lambda_1, \dots, \lambda_n</m>. Any initial state vector <m>v_0</m> can be written as
     <me> v_0 = c_1 w_1 + c_2 w_2 + \dots + c_n w_n</me>
     and then
     <me> v_t = A^t v_0  = \lambda_1^t c_1 w_1 + \lambda_2^t c_2 w_2 + \dots + \lambda_n^t c_n w_n.</me>
     Questions about the long-term behaviour can then be answered by using limit arguments from calculus.
     </p>

      <note><p>We observe that for a matrix with real-number entries, non-real eigenvalues come in conjugate pairs. It is not
       possible for a real-number <m>3 \times 3</m>-matrix to have three non-real eigenvalues.</p>
      </note>

      <example>
	<title>A <m>3</m>-dimensional example</title>
       <p>Consider the matrix <m>A</m> as in the <xref ref="threeDExample"/> below. In this case, the matrix <m>A</m> has three
       eigenvalues
       <me> \lambda_1 = \frac{1+3i}{10}, \quad \lambda_2 = \frac{1-3i}{10}, \quad \lambda_3 = 2.</me>
       with associated eigenvectors
       <me> w_1 = \vec{1 -2 1-i}, \quad w_2 = \vec{1 -2 1+i}, \quad w_3 = \vec{1 0 1},</me>
       where <m>w_1</m> and <m>w_2</m> do not have real-number entries.</p>

       
      
       <figure xml:id="threeDExample"><caption>A representation of a <m>3</m>-dimensional discrete dynamical system</caption>
       <mathbox source="demos/dynamics.html?mat=0.1,0.3:-0.3,0.1&amp;eigenz=2&amp;v1=0,0,1&amp;v2=1,-2,1&amp;v3=-1,0,1&amp;vec=false&amp;path=false" height="600px"/>
       </figure>
       <p>
	 Any vector <m>v_0</m> can be written as a linear combination
	 <me> v_0 = c_1 w_1 + c_2 w_2 + c_3 w_3</me>
	 and so the vector <m>v_t = Av_0</m> can be written as a sum of three vectors:
	 <me> v_t = \left( \frac{1+3i}{10} \right)^t c_1 \vec{1 -2 1-i} + \left(\frac{1-3i}{10}\right)^t c_2 \vec{1 -2
	 1+i} + 2^t c_3 \vec{1 0 1}.</me>
	 As <m>t \to \infty</m>, the first two terms become smaller and smaller, because
	 <me>\left|\frac{1+3i}{10}\right| = \left|\frac{1-3i}{10}\right|= \frac{1}{\sqrt{10}}</me>
	 while the last term takes over (provided <m>c_3 \neq 0</m>). 	 
       </p>
       <p> The long-term behaviour of <m>v_0, v_1, v_2, \dots</m> in this system is to spiral in towards the
       <m>2</m>-eigenspace, the span of <m>\vec{1 0 1}</m>, and to be repelled away from the origin along this
       eigenspace.
       </p>
      </example>

      <!-- <example> -->
      <!-- 	<title>The rabbits revisited</title> -->
      <!-- 	<p>Near the beginning of this section, we introduced an example about some rabbits, <xref -->
      <!-- 	ref="In"/>. ddsRabbitExample this story -->
      <!-- 	<me>\mat{0 6 8; \frac12 0 0; 0 \frac12 0} v_t = v_{t+1}.</me> -->
      <!-- 	Write <m>A</m> for the <m>3 \times 3</m>-matrix above. -->
      <!-- 	</p> -->
	
      <!-- </example> -->
   </subsection>
   </section>
